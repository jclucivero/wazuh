// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: router.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_router_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_router_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "engine.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_router_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_router_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_router_2eproto;
namespace com {
namespace wazuh {
namespace api {
namespace engine {
namespace router {
class Entry;
struct EntryDefaultTypeInternal;
extern EntryDefaultTypeInternal _Entry_default_instance_;
class RouteGet_Request;
struct RouteGet_RequestDefaultTypeInternal;
extern RouteGet_RequestDefaultTypeInternal _RouteGet_Request_default_instance_;
class RouteGet_Response;
struct RouteGet_ResponseDefaultTypeInternal;
extern RouteGet_ResponseDefaultTypeInternal _RouteGet_Response_default_instance_;
}  // namespace router
}  // namespace engine
}  // namespace api
}  // namespace wazuh
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::wazuh::api::engine::router::Entry* Arena::CreateMaybeMessage<::com::wazuh::api::engine::router::Entry>(Arena*);
template<> ::com::wazuh::api::engine::router::RouteGet_Request* Arena::CreateMaybeMessage<::com::wazuh::api::engine::router::RouteGet_Request>(Arena*);
template<> ::com::wazuh::api::engine::router::RouteGet_Response* Arena::CreateMaybeMessage<::com::wazuh::api::engine::router::RouteGet_Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace wazuh {
namespace api {
namespace engine {
namespace router {

// ===================================================================

class Entry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.router.Entry) */ {
 public:
  inline Entry() : Entry(nullptr) {}
  ~Entry() override;
  explicit PROTOBUF_CONSTEXPR Entry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Entry(const Entry& from);
  Entry(Entry&& from) noexcept
    : Entry() {
    *this = ::std::move(from);
  }

  inline Entry& operator=(const Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Entry& operator=(Entry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Entry& default_instance() {
    return *internal_default_instance();
  }
  static inline const Entry* internal_default_instance() {
    return reinterpret_cast<const Entry*>(
               &_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Entry& a, Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(Entry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Entry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Entry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Entry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Entry& from) {
    Entry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Entry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.router.Entry";
  }
  protected:
  explicit Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAssetFilterFieldNumber = 2,
    kAssetPolicyFieldNumber = 3,
    kPriorityFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string asset_filter = 2;
  void clear_asset_filter();
  const std::string& asset_filter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_asset_filter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_asset_filter();
  PROTOBUF_NODISCARD std::string* release_asset_filter();
  void set_allocated_asset_filter(std::string* asset_filter);
  private:
  const std::string& _internal_asset_filter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_asset_filter(const std::string& value);
  std::string* _internal_mutable_asset_filter();
  public:

  // string asset_policy = 3;
  void clear_asset_policy();
  const std::string& asset_policy() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_asset_policy(ArgT0&& arg0, ArgT... args);
  std::string* mutable_asset_policy();
  PROTOBUF_NODISCARD std::string* release_asset_policy();
  void set_allocated_asset_policy(std::string* asset_policy);
  private:
  const std::string& _internal_asset_policy() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_asset_policy(const std::string& value);
  std::string* _internal_mutable_asset_policy();
  public:

  // int32 priority = 4;
  void clear_priority();
  int32_t priority() const;
  void set_priority(int32_t value);
  private:
  int32_t _internal_priority() const;
  void _internal_set_priority(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.router.Entry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_filter_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_policy_;
    int32_t priority_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class RouteGet_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.router.RouteGet_Request) */ {
 public:
  inline RouteGet_Request() : RouteGet_Request(nullptr) {}
  ~RouteGet_Request() override;
  explicit PROTOBUF_CONSTEXPR RouteGet_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RouteGet_Request(const RouteGet_Request& from);
  RouteGet_Request(RouteGet_Request&& from) noexcept
    : RouteGet_Request() {
    *this = ::std::move(from);
  }

  inline RouteGet_Request& operator=(const RouteGet_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteGet_Request& operator=(RouteGet_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RouteGet_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const RouteGet_Request* internal_default_instance() {
    return reinterpret_cast<const RouteGet_Request*>(
               &_RouteGet_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RouteGet_Request& a, RouteGet_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteGet_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouteGet_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RouteGet_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RouteGet_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RouteGet_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RouteGet_Request& from) {
    RouteGet_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteGet_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.router.RouteGet_Request";
  }
  protected:
  explicit RouteGet_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.router.RouteGet_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class RouteGet_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.router.RouteGet_Response) */ {
 public:
  inline RouteGet_Response() : RouteGet_Response(nullptr) {}
  ~RouteGet_Response() override;
  explicit PROTOBUF_CONSTEXPR RouteGet_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RouteGet_Response(const RouteGet_Response& from);
  RouteGet_Response(RouteGet_Response&& from) noexcept
    : RouteGet_Response() {
    *this = ::std::move(from);
  }

  inline RouteGet_Response& operator=(const RouteGet_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteGet_Response& operator=(RouteGet_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RouteGet_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const RouteGet_Response* internal_default_instance() {
    return reinterpret_cast<const RouteGet_Response*>(
               &_RouteGet_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RouteGet_Response& a, RouteGet_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteGet_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouteGet_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RouteGet_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RouteGet_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RouteGet_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RouteGet_Response& from) {
    RouteGet_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteGet_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.router.RouteGet_Response";
  }
  protected:
  explicit RouteGet_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kRuteFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // optional string error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // optional .com.wazuh.api.engine.router.Entry rute = 3;
  bool has_rute() const;
  private:
  bool _internal_has_rute() const;
  public:
  void clear_rute();
  const ::com::wazuh::api::engine::router::Entry& rute() const;
  PROTOBUF_NODISCARD ::com::wazuh::api::engine::router::Entry* release_rute();
  ::com::wazuh::api::engine::router::Entry* mutable_rute();
  void set_allocated_rute(::com::wazuh::api::engine::router::Entry* rute);
  private:
  const ::com::wazuh::api::engine::router::Entry& _internal_rute() const;
  ::com::wazuh::api::engine::router::Entry* _internal_mutable_rute();
  public:
  void unsafe_arena_set_allocated_rute(
      ::com::wazuh::api::engine::router::Entry* rute);
  ::com::wazuh::api::engine::router::Entry* unsafe_arena_release_rute();

  // .com.wazuh.api.engine.ReturnStatus status = 1;
  void clear_status();
  ::com::wazuh::api::engine::ReturnStatus status() const;
  void set_status(::com::wazuh::api::engine::ReturnStatus value);
  private:
  ::com::wazuh::api::engine::ReturnStatus _internal_status() const;
  void _internal_set_status(::com::wazuh::api::engine::ReturnStatus value);
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.router.RouteGet_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
    ::com::wazuh::api::engine::router::Entry* rute_;
    int status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_router_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Entry

// string name = 1;
inline void Entry::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Entry::name() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.router.Entry.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Entry::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.router.Entry.name)
}
inline std::string* Entry::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.router.Entry.name)
  return _s;
}
inline const std::string& Entry::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Entry::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Entry::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Entry::release_name() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.router.Entry.name)
  return _impl_.name_.Release();
}
inline void Entry::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.router.Entry.name)
}

// string asset_filter = 2;
inline void Entry::clear_asset_filter() {
  _impl_.asset_filter_.ClearToEmpty();
}
inline const std::string& Entry::asset_filter() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.router.Entry.asset_filter)
  return _internal_asset_filter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Entry::set_asset_filter(ArgT0&& arg0, ArgT... args) {
 
 _impl_.asset_filter_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.router.Entry.asset_filter)
}
inline std::string* Entry::mutable_asset_filter() {
  std::string* _s = _internal_mutable_asset_filter();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.router.Entry.asset_filter)
  return _s;
}
inline const std::string& Entry::_internal_asset_filter() const {
  return _impl_.asset_filter_.Get();
}
inline void Entry::_internal_set_asset_filter(const std::string& value) {
  
  _impl_.asset_filter_.Set(value, GetArenaForAllocation());
}
inline std::string* Entry::_internal_mutable_asset_filter() {
  
  return _impl_.asset_filter_.Mutable(GetArenaForAllocation());
}
inline std::string* Entry::release_asset_filter() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.router.Entry.asset_filter)
  return _impl_.asset_filter_.Release();
}
inline void Entry::set_allocated_asset_filter(std::string* asset_filter) {
  if (asset_filter != nullptr) {
    
  } else {
    
  }
  _impl_.asset_filter_.SetAllocated(asset_filter, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.asset_filter_.IsDefault()) {
    _impl_.asset_filter_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.router.Entry.asset_filter)
}

// string asset_policy = 3;
inline void Entry::clear_asset_policy() {
  _impl_.asset_policy_.ClearToEmpty();
}
inline const std::string& Entry::asset_policy() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.router.Entry.asset_policy)
  return _internal_asset_policy();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Entry::set_asset_policy(ArgT0&& arg0, ArgT... args) {
 
 _impl_.asset_policy_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.router.Entry.asset_policy)
}
inline std::string* Entry::mutable_asset_policy() {
  std::string* _s = _internal_mutable_asset_policy();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.router.Entry.asset_policy)
  return _s;
}
inline const std::string& Entry::_internal_asset_policy() const {
  return _impl_.asset_policy_.Get();
}
inline void Entry::_internal_set_asset_policy(const std::string& value) {
  
  _impl_.asset_policy_.Set(value, GetArenaForAllocation());
}
inline std::string* Entry::_internal_mutable_asset_policy() {
  
  return _impl_.asset_policy_.Mutable(GetArenaForAllocation());
}
inline std::string* Entry::release_asset_policy() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.router.Entry.asset_policy)
  return _impl_.asset_policy_.Release();
}
inline void Entry::set_allocated_asset_policy(std::string* asset_policy) {
  if (asset_policy != nullptr) {
    
  } else {
    
  }
  _impl_.asset_policy_.SetAllocated(asset_policy, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.asset_policy_.IsDefault()) {
    _impl_.asset_policy_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.router.Entry.asset_policy)
}

// int32 priority = 4;
inline void Entry::clear_priority() {
  _impl_.priority_ = 0;
}
inline int32_t Entry::_internal_priority() const {
  return _impl_.priority_;
}
inline int32_t Entry::priority() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.router.Entry.priority)
  return _internal_priority();
}
inline void Entry::_internal_set_priority(int32_t value) {
  
  _impl_.priority_ = value;
}
inline void Entry::set_priority(int32_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.router.Entry.priority)
}

// -------------------------------------------------------------------

// RouteGet_Request

// string name = 1;
inline void RouteGet_Request::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& RouteGet_Request::name() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.router.RouteGet_Request.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RouteGet_Request::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.router.RouteGet_Request.name)
}
inline std::string* RouteGet_Request::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.router.RouteGet_Request.name)
  return _s;
}
inline const std::string& RouteGet_Request::_internal_name() const {
  return _impl_.name_.Get();
}
inline void RouteGet_Request::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* RouteGet_Request::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* RouteGet_Request::release_name() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.router.RouteGet_Request.name)
  return _impl_.name_.Release();
}
inline void RouteGet_Request::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.router.RouteGet_Request.name)
}

// -------------------------------------------------------------------

// RouteGet_Response

// .com.wazuh.api.engine.ReturnStatus status = 1;
inline void RouteGet_Response::clear_status() {
  _impl_.status_ = 0;
}
inline ::com::wazuh::api::engine::ReturnStatus RouteGet_Response::_internal_status() const {
  return static_cast< ::com::wazuh::api::engine::ReturnStatus >(_impl_.status_);
}
inline ::com::wazuh::api::engine::ReturnStatus RouteGet_Response::status() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.router.RouteGet_Response.status)
  return _internal_status();
}
inline void RouteGet_Response::_internal_set_status(::com::wazuh::api::engine::ReturnStatus value) {
  
  _impl_.status_ = value;
}
inline void RouteGet_Response::set_status(::com::wazuh::api::engine::ReturnStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.router.RouteGet_Response.status)
}

// optional string error = 2;
inline bool RouteGet_Response::_internal_has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RouteGet_Response::has_error() const {
  return _internal_has_error();
}
inline void RouteGet_Response::clear_error() {
  _impl_.error_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RouteGet_Response::error() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.router.RouteGet_Response.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RouteGet_Response::set_error(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.error_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.router.RouteGet_Response.error)
}
inline std::string* RouteGet_Response::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.router.RouteGet_Response.error)
  return _s;
}
inline const std::string& RouteGet_Response::_internal_error() const {
  return _impl_.error_.Get();
}
inline void RouteGet_Response::_internal_set_error(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.error_.Set(value, GetArenaForAllocation());
}
inline std::string* RouteGet_Response::_internal_mutable_error() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.error_.Mutable(GetArenaForAllocation());
}
inline std::string* RouteGet_Response::release_error() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.router.RouteGet_Response.error)
  if (!_internal_has_error()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.error_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RouteGet_Response::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.error_.SetAllocated(error, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.router.RouteGet_Response.error)
}

// optional .com.wazuh.api.engine.router.Entry rute = 3;
inline bool RouteGet_Response::_internal_has_rute() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rute_ != nullptr);
  return value;
}
inline bool RouteGet_Response::has_rute() const {
  return _internal_has_rute();
}
inline void RouteGet_Response::clear_rute() {
  if (_impl_.rute_ != nullptr) _impl_.rute_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::com::wazuh::api::engine::router::Entry& RouteGet_Response::_internal_rute() const {
  const ::com::wazuh::api::engine::router::Entry* p = _impl_.rute_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::wazuh::api::engine::router::Entry&>(
      ::com::wazuh::api::engine::router::_Entry_default_instance_);
}
inline const ::com::wazuh::api::engine::router::Entry& RouteGet_Response::rute() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.router.RouteGet_Response.rute)
  return _internal_rute();
}
inline void RouteGet_Response::unsafe_arena_set_allocated_rute(
    ::com::wazuh::api::engine::router::Entry* rute) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rute_);
  }
  _impl_.rute_ = rute;
  if (rute) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.wazuh.api.engine.router.RouteGet_Response.rute)
}
inline ::com::wazuh::api::engine::router::Entry* RouteGet_Response::release_rute() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::com::wazuh::api::engine::router::Entry* temp = _impl_.rute_;
  _impl_.rute_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::wazuh::api::engine::router::Entry* RouteGet_Response::unsafe_arena_release_rute() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.router.RouteGet_Response.rute)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::com::wazuh::api::engine::router::Entry* temp = _impl_.rute_;
  _impl_.rute_ = nullptr;
  return temp;
}
inline ::com::wazuh::api::engine::router::Entry* RouteGet_Response::_internal_mutable_rute() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.rute_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::wazuh::api::engine::router::Entry>(GetArenaForAllocation());
    _impl_.rute_ = p;
  }
  return _impl_.rute_;
}
inline ::com::wazuh::api::engine::router::Entry* RouteGet_Response::mutable_rute() {
  ::com::wazuh::api::engine::router::Entry* _msg = _internal_mutable_rute();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.router.RouteGet_Response.rute)
  return _msg;
}
inline void RouteGet_Response::set_allocated_rute(::com::wazuh::api::engine::router::Entry* rute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rute_;
  }
  if (rute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rute);
    if (message_arena != submessage_arena) {
      rute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rute, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.rute_ = rute;
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.router.RouteGet_Response.rute)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace router
}  // namespace engine
}  // namespace api
}  // namespace wazuh
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_router_2eproto
