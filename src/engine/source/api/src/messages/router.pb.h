// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: router.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_router_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_router_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "engine.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_router_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_router_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_router_2eproto;
namespace com {
namespace wazuh {
namespace api {
namespace engine {
namespace router {
class Route;
struct RouteDefaultTypeInternal;
extern RouteDefaultTypeInternal _Route_default_instance_;
class routeGetRequest;
struct routeGetRequestDefaultTypeInternal;
extern routeGetRequestDefaultTypeInternal _routeGetRequest_default_instance_;
class routeGetResponse;
struct routeGetResponseDefaultTypeInternal;
extern routeGetResponseDefaultTypeInternal _routeGetResponse_default_instance_;
}  // namespace router
}  // namespace engine
}  // namespace api
}  // namespace wazuh
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::wazuh::api::engine::router::Route* Arena::CreateMaybeMessage<::com::wazuh::api::engine::router::Route>(Arena*);
template<> ::com::wazuh::api::engine::router::routeGetRequest* Arena::CreateMaybeMessage<::com::wazuh::api::engine::router::routeGetRequest>(Arena*);
template<> ::com::wazuh::api::engine::router::routeGetResponse* Arena::CreateMaybeMessage<::com::wazuh::api::engine::router::routeGetResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace wazuh {
namespace api {
namespace engine {
namespace router {

// ===================================================================

class Route final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.router.Route) */ {
 public:
  inline Route() : Route(nullptr) {}
  ~Route() override;
  explicit PROTOBUF_CONSTEXPR Route(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Route(const Route& from);
  Route(Route&& from) noexcept
    : Route() {
    *this = ::std::move(from);
  }

  inline Route& operator=(const Route& from) {
    CopyFrom(from);
    return *this;
  }
  inline Route& operator=(Route&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Route& default_instance() {
    return *internal_default_instance();
  }
  static inline const Route* internal_default_instance() {
    return reinterpret_cast<const Route*>(
               &_Route_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Route& a, Route& b) {
    a.Swap(&b);
  }
  inline void Swap(Route* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Route* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Route* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Route>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Route& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Route& from) {
    Route::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Route* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.router.Route";
  }
  protected:
  explicit Route(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAssetFilterFieldNumber = 2,
    kAssetPolicyFieldNumber = 3,
    kPriorityFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string asset_filter = 2;
  void clear_asset_filter();
  const std::string& asset_filter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_asset_filter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_asset_filter();
  PROTOBUF_NODISCARD std::string* release_asset_filter();
  void set_allocated_asset_filter(std::string* asset_filter);
  private:
  const std::string& _internal_asset_filter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_asset_filter(const std::string& value);
  std::string* _internal_mutable_asset_filter();
  public:

  // string asset_policy = 3;
  void clear_asset_policy();
  const std::string& asset_policy() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_asset_policy(ArgT0&& arg0, ArgT... args);
  std::string* mutable_asset_policy();
  PROTOBUF_NODISCARD std::string* release_asset_policy();
  void set_allocated_asset_policy(std::string* asset_policy);
  private:
  const std::string& _internal_asset_policy() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_asset_policy(const std::string& value);
  std::string* _internal_mutable_asset_policy();
  public:

  // int32 priority = 4;
  void clear_priority();
  int32_t priority() const;
  void set_priority(int32_t value);
  private:
  int32_t _internal_priority() const;
  void _internal_set_priority(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.router.Route)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_filter_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_policy_;
    int32_t priority_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class routeGetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.router.routeGetRequest) */ {
 public:
  inline routeGetRequest() : routeGetRequest(nullptr) {}
  ~routeGetRequest() override;
  explicit PROTOBUF_CONSTEXPR routeGetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  routeGetRequest(const routeGetRequest& from);
  routeGetRequest(routeGetRequest&& from) noexcept
    : routeGetRequest() {
    *this = ::std::move(from);
  }

  inline routeGetRequest& operator=(const routeGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline routeGetRequest& operator=(routeGetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const routeGetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const routeGetRequest* internal_default_instance() {
    return reinterpret_cast<const routeGetRequest*>(
               &_routeGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(routeGetRequest& a, routeGetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(routeGetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(routeGetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  routeGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<routeGetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const routeGetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const routeGetRequest& from) {
    routeGetRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(routeGetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.router.routeGetRequest";
  }
  protected:
  explicit routeGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.router.routeGetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class routeGetResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.router.routeGetResponse) */ {
 public:
  inline routeGetResponse() : routeGetResponse(nullptr) {}
  ~routeGetResponse() override;
  explicit PROTOBUF_CONSTEXPR routeGetResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  routeGetResponse(const routeGetResponse& from);
  routeGetResponse(routeGetResponse&& from) noexcept
    : routeGetResponse() {
    *this = ::std::move(from);
  }

  inline routeGetResponse& operator=(const routeGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline routeGetResponse& operator=(routeGetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const routeGetResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const routeGetResponse* internal_default_instance() {
    return reinterpret_cast<const routeGetResponse*>(
               &_routeGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(routeGetResponse& a, routeGetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(routeGetResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(routeGetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  routeGetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<routeGetResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const routeGetResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const routeGetResponse& from) {
    routeGetResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(routeGetResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.router.routeGetResponse";
  }
  protected:
  explicit routeGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kRouteFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // optional string error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // optional .com.wazuh.api.engine.router.Route route = 3;
  bool has_route() const;
  private:
  bool _internal_has_route() const;
  public:
  void clear_route();
  const ::com::wazuh::api::engine::router::Route& route() const;
  PROTOBUF_NODISCARD ::com::wazuh::api::engine::router::Route* release_route();
  ::com::wazuh::api::engine::router::Route* mutable_route();
  void set_allocated_route(::com::wazuh::api::engine::router::Route* route);
  private:
  const ::com::wazuh::api::engine::router::Route& _internal_route() const;
  ::com::wazuh::api::engine::router::Route* _internal_mutable_route();
  public:
  void unsafe_arena_set_allocated_route(
      ::com::wazuh::api::engine::router::Route* route);
  ::com::wazuh::api::engine::router::Route* unsafe_arena_release_route();

  // .com.wazuh.api.engine.ResturnCodeStatus status = 1;
  void clear_status();
  ::com::wazuh::api::engine::ResturnCodeStatus status() const;
  void set_status(::com::wazuh::api::engine::ResturnCodeStatus value);
  private:
  ::com::wazuh::api::engine::ResturnCodeStatus _internal_status() const;
  void _internal_set_status(::com::wazuh::api::engine::ResturnCodeStatus value);
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.router.routeGetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
    ::com::wazuh::api::engine::router::Route* route_;
    int status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_router_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Route

// string name = 1;
inline void Route::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Route::name() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.router.Route.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Route::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.router.Route.name)
}
inline std::string* Route::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.router.Route.name)
  return _s;
}
inline const std::string& Route::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Route::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Route::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Route::release_name() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.router.Route.name)
  return _impl_.name_.Release();
}
inline void Route::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.router.Route.name)
}

// string asset_filter = 2;
inline void Route::clear_asset_filter() {
  _impl_.asset_filter_.ClearToEmpty();
}
inline const std::string& Route::asset_filter() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.router.Route.asset_filter)
  return _internal_asset_filter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Route::set_asset_filter(ArgT0&& arg0, ArgT... args) {
 
 _impl_.asset_filter_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.router.Route.asset_filter)
}
inline std::string* Route::mutable_asset_filter() {
  std::string* _s = _internal_mutable_asset_filter();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.router.Route.asset_filter)
  return _s;
}
inline const std::string& Route::_internal_asset_filter() const {
  return _impl_.asset_filter_.Get();
}
inline void Route::_internal_set_asset_filter(const std::string& value) {
  
  _impl_.asset_filter_.Set(value, GetArenaForAllocation());
}
inline std::string* Route::_internal_mutable_asset_filter() {
  
  return _impl_.asset_filter_.Mutable(GetArenaForAllocation());
}
inline std::string* Route::release_asset_filter() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.router.Route.asset_filter)
  return _impl_.asset_filter_.Release();
}
inline void Route::set_allocated_asset_filter(std::string* asset_filter) {
  if (asset_filter != nullptr) {
    
  } else {
    
  }
  _impl_.asset_filter_.SetAllocated(asset_filter, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.asset_filter_.IsDefault()) {
    _impl_.asset_filter_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.router.Route.asset_filter)
}

// string asset_policy = 3;
inline void Route::clear_asset_policy() {
  _impl_.asset_policy_.ClearToEmpty();
}
inline const std::string& Route::asset_policy() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.router.Route.asset_policy)
  return _internal_asset_policy();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Route::set_asset_policy(ArgT0&& arg0, ArgT... args) {
 
 _impl_.asset_policy_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.router.Route.asset_policy)
}
inline std::string* Route::mutable_asset_policy() {
  std::string* _s = _internal_mutable_asset_policy();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.router.Route.asset_policy)
  return _s;
}
inline const std::string& Route::_internal_asset_policy() const {
  return _impl_.asset_policy_.Get();
}
inline void Route::_internal_set_asset_policy(const std::string& value) {
  
  _impl_.asset_policy_.Set(value, GetArenaForAllocation());
}
inline std::string* Route::_internal_mutable_asset_policy() {
  
  return _impl_.asset_policy_.Mutable(GetArenaForAllocation());
}
inline std::string* Route::release_asset_policy() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.router.Route.asset_policy)
  return _impl_.asset_policy_.Release();
}
inline void Route::set_allocated_asset_policy(std::string* asset_policy) {
  if (asset_policy != nullptr) {
    
  } else {
    
  }
  _impl_.asset_policy_.SetAllocated(asset_policy, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.asset_policy_.IsDefault()) {
    _impl_.asset_policy_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.router.Route.asset_policy)
}

// int32 priority = 4;
inline void Route::clear_priority() {
  _impl_.priority_ = 0;
}
inline int32_t Route::_internal_priority() const {
  return _impl_.priority_;
}
inline int32_t Route::priority() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.router.Route.priority)
  return _internal_priority();
}
inline void Route::_internal_set_priority(int32_t value) {
  
  _impl_.priority_ = value;
}
inline void Route::set_priority(int32_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.router.Route.priority)
}

// -------------------------------------------------------------------

// routeGetRequest

// string name = 1;
inline void routeGetRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& routeGetRequest::name() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.router.routeGetRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void routeGetRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.router.routeGetRequest.name)
}
inline std::string* routeGetRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.router.routeGetRequest.name)
  return _s;
}
inline const std::string& routeGetRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void routeGetRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* routeGetRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* routeGetRequest::release_name() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.router.routeGetRequest.name)
  return _impl_.name_.Release();
}
inline void routeGetRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.router.routeGetRequest.name)
}

// -------------------------------------------------------------------

// routeGetResponse

// .com.wazuh.api.engine.ResturnCodeStatus status = 1;
inline void routeGetResponse::clear_status() {
  _impl_.status_ = 0;
}
inline ::com::wazuh::api::engine::ResturnCodeStatus routeGetResponse::_internal_status() const {
  return static_cast< ::com::wazuh::api::engine::ResturnCodeStatus >(_impl_.status_);
}
inline ::com::wazuh::api::engine::ResturnCodeStatus routeGetResponse::status() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.router.routeGetResponse.status)
  return _internal_status();
}
inline void routeGetResponse::_internal_set_status(::com::wazuh::api::engine::ResturnCodeStatus value) {
  
  _impl_.status_ = value;
}
inline void routeGetResponse::set_status(::com::wazuh::api::engine::ResturnCodeStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.router.routeGetResponse.status)
}

// optional string error = 2;
inline bool routeGetResponse::_internal_has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool routeGetResponse::has_error() const {
  return _internal_has_error();
}
inline void routeGetResponse::clear_error() {
  _impl_.error_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& routeGetResponse::error() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.router.routeGetResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void routeGetResponse::set_error(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.error_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.router.routeGetResponse.error)
}
inline std::string* routeGetResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.router.routeGetResponse.error)
  return _s;
}
inline const std::string& routeGetResponse::_internal_error() const {
  return _impl_.error_.Get();
}
inline void routeGetResponse::_internal_set_error(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.error_.Set(value, GetArenaForAllocation());
}
inline std::string* routeGetResponse::_internal_mutable_error() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.error_.Mutable(GetArenaForAllocation());
}
inline std::string* routeGetResponse::release_error() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.router.routeGetResponse.error)
  if (!_internal_has_error()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.error_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void routeGetResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.error_.SetAllocated(error, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.router.routeGetResponse.error)
}

// optional .com.wazuh.api.engine.router.Route route = 3;
inline bool routeGetResponse::_internal_has_route() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.route_ != nullptr);
  return value;
}
inline bool routeGetResponse::has_route() const {
  return _internal_has_route();
}
inline void routeGetResponse::clear_route() {
  if (_impl_.route_ != nullptr) _impl_.route_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::com::wazuh::api::engine::router::Route& routeGetResponse::_internal_route() const {
  const ::com::wazuh::api::engine::router::Route* p = _impl_.route_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::wazuh::api::engine::router::Route&>(
      ::com::wazuh::api::engine::router::_Route_default_instance_);
}
inline const ::com::wazuh::api::engine::router::Route& routeGetResponse::route() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.router.routeGetResponse.route)
  return _internal_route();
}
inline void routeGetResponse::unsafe_arena_set_allocated_route(
    ::com::wazuh::api::engine::router::Route* route) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.route_);
  }
  _impl_.route_ = route;
  if (route) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.wazuh.api.engine.router.routeGetResponse.route)
}
inline ::com::wazuh::api::engine::router::Route* routeGetResponse::release_route() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::com::wazuh::api::engine::router::Route* temp = _impl_.route_;
  _impl_.route_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::wazuh::api::engine::router::Route* routeGetResponse::unsafe_arena_release_route() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.router.routeGetResponse.route)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::com::wazuh::api::engine::router::Route* temp = _impl_.route_;
  _impl_.route_ = nullptr;
  return temp;
}
inline ::com::wazuh::api::engine::router::Route* routeGetResponse::_internal_mutable_route() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.route_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::wazuh::api::engine::router::Route>(GetArenaForAllocation());
    _impl_.route_ = p;
  }
  return _impl_.route_;
}
inline ::com::wazuh::api::engine::router::Route* routeGetResponse::mutable_route() {
  ::com::wazuh::api::engine::router::Route* _msg = _internal_mutable_route();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.router.routeGetResponse.route)
  return _msg;
}
inline void routeGetResponse::set_allocated_route(::com::wazuh::api::engine::router::Route* route) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.route_;
  }
  if (route) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(route);
    if (message_arena != submessage_arena) {
      route = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, route, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.route_ = route;
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.router.routeGetResponse.route)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace router
}  // namespace engine
}  // namespace api
}  // namespace wazuh
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_router_2eproto
